



RATS Working Group                                           H. Birkholz
Internet-Draft                                                  M. Eckel
Intended status: Informational                            Fraunhofer SIT
Expires: 26 December 2020                                   24 June 2020


     Reference Interaction Models for Remote Attestation Procedures
         draft-birkholz-rats-reference-interaction-model-latest

Abstract

   This document describes interaction models for remote attestation
   procedures (RATS).  Three conveying mechanisms - Challenge/Response,
   Uni-Directional, and Attestation Telemetry - are illustrated and
   defined.  Analogously, a general overview about the information
   elements typically used by corresponding conveyance protocols are
   highlighted.  Privacy preserving conveyance of Evidence via Direct
   Anonymous Attestation is elaborated on for each interaction model,
   individually.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 26 December 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.










Birkholz & Eckel        Expires 26 December 2020                [Page 1]

Internet-Draft                    REIM                         June 2020


   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Simplified BSD License text
   as described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . . .   3
   3.  Disambiguation  . . . . . . . . . . . . . . . . . . . . . . .   4
   4.  Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
   5.  Normative Prerequisites . . . . . . . . . . . . . . . . . . .   4
   6.  Generic Information Elements  . . . . . . . . . . . . . . . .   5
   7.  Interaction Models  . . . . . . . . . . . . . . . . . . . . .   7
     7.1.  Challenge/Response Remote Attestation . . . . . . . . . .   7
     7.2.  Uni-Directional Remote Attestation  . . . . . . . . . . .   9
     7.3.  Streaming Remote Attestation  . . . . . . . . . . . . . .  11
   8.  Additional Application-Specific Requirements  . . . . . . . .  13
     8.1.  Confidentiality . . . . . . . . . . . . . . . . . . . . .  13
     8.2.  Mutual Authentication . . . . . . . . . . . . . . . . . .  13
     8.3.  Hardware-Enforcement/Support  . . . . . . . . . . . . . .  13
   9.  Implementation Status . . . . . . . . . . . . . . . . . . . .  13
     9.1.  Implementer . . . . . . . . . . . . . . . . . . . . . . .  14
     9.2.  Implementation Name . . . . . . . . . . . . . . . . . . .  14
     9.3.  Implementation URL  . . . . . . . . . . . . . . . . . . .  14
     9.4.  Maturity  . . . . . . . . . . . . . . . . . . . . . . . .  14
     9.5.  Coverage and Version Compatibility  . . . . . . . . . . .  14
     9.6.  License . . . . . . . . . . . . . . . . . . . . . . . . .  15
     9.7.  Implementation Dependencies . . . . . . . . . . . . . . .  15
     9.8.  Contact . . . . . . . . . . . . . . . . . . . . . . . . .  15
   10. Security and Privacy Considerations . . . . . . . . . . . . .  15
   11. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  15
   12. Change Log  . . . . . . . . . . . . . . . . . . . . . . . . .  15
   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  16
     13.1.  Normative References . . . . . . . . . . . . . . . . . .  16
     13.2.  Informative References . . . . . . . . . . . . . . . . .  17
   Appendix A.  CDDL Specification for a simple CoAP Challenge/
           Response Interaction  . . . . . . . . . . . . . . . . . .  17
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  18








Birkholz & Eckel        Expires 26 December 2020                [Page 2]

Internet-Draft                    REIM                         June 2020


1.  Introduction

   Remote ATtestation procedureS (RATS, [I-D.ietf-rats-architecture])
   are workflows composed of roles and interactions, in which Verifiers
   create Attestation Results about the trustworthiness of an Attester's
   system component characteristics.  The Verifier's assessment in the
   form of Attestation Results is created based on Attestation Policies
   and Evidence - trustable and temper-evident Claims Sets about an
   Attester's system component characteristics - created by an Attester.
   The roles _Attester_ and _Verifier_, as well as the Conceptual
   Messages _Evidence_ and _Attestation Results_ are terms defined by
   the RATS Architecture [I-D.ietf-rats-architecture].  This documents
   captures interaction models that can be used in specific RATS-related
   solution documents.  The primary focus of this document is the
   conveyance of attestation Evidence.  Specific goals of this document
   re to:

   *  prevent inconsistencies in descriptions of these interaction
      models in other documents (due to text cloning over time),

   *  enable to highlight an exact delta/divergence between the core set
      of characteristics captured here in this document and variants of
      these interaction models used in other specifications or
      solutions, and to

   *  illustrate the application of Direct Anonymous Attestation (DAA)
      for each of the interaction models described.

   In summary, this document enables the specification and design of
   trustworthy and privacy preserving conveyance methods for attestation
   Evidence from an Attester to a Verifier.  While the conveyance of
   other Conceptual Messages is out-of-scope [note: may still change]
   the methods described can also be applied to the conveyance of
   Endorsements or Attestation Results.

2.  Terminology

   This document uses the terms, roles, and concepts defined in
   [I-D.ietf-rats-architecture].

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.






Birkholz & Eckel        Expires 26 December 2020                [Page 3]

Internet-Draft                    REIM                         June 2020


3.  Disambiguation

   The term "Remote Attestation" is a common expression and often
   associated with certain properties.  The term "Remote" in this
   context does not necessarily refer to a remote entity in the scope of
   network topologies or the Internet.  It rather refers to a decoupled
   system or entities that exchange the payload of the Conceptual
   Message type called Evidence [I-D.ietf-rats-architecture].  This
   conveyance can also be "local", if the Verifier is part of the same
   entity as the Attester, e.g., separate system components of a
   Composite Device (a single RATS Entity).  Examples of these types of
   co-located environments include: a Trusted Execution Environment
   (TEE), Baseboard Management Controllers (BMCs), as well as other
   physical or logical protected/isolated/shielded Computing
   Environments (e.g. embedded Secure Elements (eSE) or Trusted Platform
   Modules (TPM)).

4.  Scope

   This document focuses on generic interaction models between Attesters
   and Verifiers.  Complementary procedures, functions, or services that
   are required for a complete semantic binding of the concepts defined
   in [I-D.ietf-rats-architecture] are not in scope.  Examples include:
   identity establishment, key distribution and enrollment, as well as
   certificate revocation.

   Furthermore, any processes and duties that go beyond carrying out
   remote attestation procedures are out-of-scope.  For instance, using
   the results of a remote attestation that are created by the Verifier,
   e.g., triggering remediation actions or recovery processes, as well
   as the remediation actions and recovery processes themselves, are
   also out-of-scope.

5.  Normative Prerequisites

   In order to ensure an appropriate conveyance of Evidence, the
   following set of prerequisites must be in place to support the
   implementation of interaction models:

   Attester Identity:  The provenance of Evidence with respect to a
      distinguishable Attesting Environment MUST be correct and
      unambiguous.

      An Attester Identity MAY be a unique identity, it MAY be included
      in a zero-knowledge proof (ZKP), or it MAY be part of a group
      signature.

   Attestation Evidence:  Evidence MUST be a set of well-formatted and



Birkholz & Eckel        Expires 26 December 2020                [Page 4]

Internet-Draft                    REIM                         June 2020


      well-protected Claims that an Attester can create and convey to a
      Verifier in a temper-evident manner.

      Evidence MUST include an indicator about its Freshness that can be
      understood by a Verifier.

   Attestation Evidence Authenticity:  Attestation Evidence MUST be
      correct and authentic.

      Attestation Evidence, in order to provide proof of authenticity,
      SHOULD be cryptographically associated with an identity document
      (e.g. an X.509 certificate or trusted key material), or SHOULD
      include a correct and unambiguous and stable reference to an
      accessible identity document.

   Authentication Secret:  An Authentication Secret MUST be available
      exclusively to an Attester's Attesting Environment.

      The Attester MUST protect Claims with that Authentication Secret,
      thereby proving the authenticity of the Claims included in
      Evidence.  The Authentication Secret MUST be established before
      RATS can take place.

6.  Generic Information Elements

   This section defines the information elements that can be used in all
   interaction models.  Varying from solution to solution, generic
   information elements can be either included in the scope of protocol
   messages or can be included in their payload.  Ultimately, they have
   to be conveyed in order to enable an interaction model.

   Attester Identity ('attesterIdentity'):  _mandatory_

      A statement about a distinguishable Attester made by an Endorser
      without accompanying evidence of its validity - used as proof of
      identity.

   Authentication Secret IDs ('authSecID'):  _mandatory_

      A statement representing an identifier list that MUST be
      associated with corresponding Authentication Secrets used to
      protect Evidence.  Each Authentication Secrets is uniquely
      associated with a distinguishable Attesting Environment.
      Consecutively, an Authentication Secret ID also identifies an
      Attesting Environment.

   Handle ('handle'):  _mandatory_




Birkholz & Eckel        Expires 26 December 2020                [Page 5]

Internet-Draft                    REIM                         June 2020


      A statement that is intended to uniquely distinguish received
      Evidence and/or determine the Freshness of Evidence.  A Verifier
      can also use a Handle as an indicator for authenticity or
      attestation provenance, as only Attesters and Verifiers that are
      intended to exchange Evidence should have knowledge of the
      corresponding Handles.  Examples include Nonces or signed
      timestamps.

   Claims ('claims'):  _mandatory_

      Claims are assertions that represent characteristics of an
      Attester.  Claims compose attestation Evidence and are, for
      example, used to appraise the integrity of an Attester by a
      Verifier.  The statements that compose the information elements in
      this section can also be expressed as Claims in Evidence by some
      solutions.

   Reference Claims ('refClaims')  _mandatory_

      Reference Claims are a specific subset of Appraisal Policies as
      defined in [I-D.ietf-rats-architecture].  Reference Claims are
      used to appraise the Claims received from an Attester via
      appraisal by direct comparison.  For example, Reference Claims MAY
      be Reference Integrity Measurements (RIMs) or assertions that are
      implicitly trusted because they are signed by a trusted authority
      (see Endorsements in [I-D.ietf-rats-architecture]).  Reference
      Claims typically represent (trusted) Claim sets about an
      Attester's intended platform operational state.

   Claim Selection ('claimSelection'):  _optional_

      A statement that represents a (sub-)set of Claims that can be
      created by an Attester.  Claim Selections can act as filters that
      can specify the exact set of Claims to be included in Evidence.
      An Attester MAY decide whether or not to provide all Claims as
      requested via a Claim Selection.

   Evidence ('signedAttestationEvidence'):  _mandatory_

      Evidence consists of an Authentication Secret ID that identifies
      an Authentication Secret in a single Attesting Environment, the
      Attester Identity, Claims, and a Handle.  Attestation Evidence
      MUST cryptographically bind all of these information elements.
      The Evidence MUST be protected via the Authentication Secret.  The
      Authentication Secret MUST be trusted by the Verifier as
      authoritative.

   Attestation Result ('attestationResult'):  _mandatory_



Birkholz & Eckel        Expires 26 December 2020                [Page 6]

Internet-Draft                    REIM                         June 2020


      An Attestation Result is produced by the Verifier as the output of
      the appraisal of Evidence.  Attestation Results include condensed
      assertions about integrity or other characteristics of the
      corresponding Attester.

7.  Interaction Models

   The following subsections introduce and illustrate the interaction
   models:

   1.  Challenge/Response Remote Attestation

   2.  Uni-Directional Remote Attestation

   3.  Streaming Remote Attestation

   Each section starts with a sequence diagram illustrating the
   interactions between Attester and Verifier.  Other roles involved -
   mainly Relying Parties and Endorsers - are elaborated on in the
   following expositional text, if applicable.  While the interaction
   models presented focus on the conveyance of Evidence, they can also
   be used for the conveyance of other Conceptual Messages, namely
   Attestation Results, Endorsements, or Appraisal Policies.  Every
   interaction model uses a handle to incorporate a proof of freshness.
   The ways these handles are processed is the most prominent difference
   between the three interaction models.

7.1.  Challenge/Response Remote Attestation























Birkholz & Eckel        Expires 26 December 2020                [Page 7]

Internet-Draft                    REIM                         June 2020


   .----------.                                                .----------.
   | Attester |                                                | Verifier |
   '----------'                                                '----------'
        |                                                            |
        |                                                            |
   valueGeneration(targetEnvironment)                                |
        | => claims                                                  |
        |                                                            |
        | <----- requestEvidence(handle, authSecIDs, claimSelection) |
        |                                                            |
   claimsCollection(claimSelection)                                  |
        | => collectedClaims                                         |
        |                                                            |
   evidenceGeneration(handle, authSecIDs, collectedClaims)           |
        | => evidence                                                |
        |                                                            |
        | returnEvidence ------------------------------------------> |
        | returnEventLog ------------------------------------------> |
        |                                                            |
        |                  evidenceAppraisal(evidence, eventLog, refClaims)
        |                                       attestationResult <= |
        |                                                            |

   Challenge/Response Remote Attestation procedures are initiated by the
   Verifier, sending a remote attestation request to the Attester.  A
   request includes a Handle, a list of Authentication Secret IDs, and a
   Claim Selection.  In the Challenge/Response model, the handle is
   composed of qualifying data in the form of a nonce.  The Verifier-
   generated (and therefore Verifier-known) nonce is intended to
   guarantee Evidence freshness.  The list of Authentication Secret IDs
   selects the attestation keys with which the Attester is requested to
   sign the Attestation Evidence.  Each selected key is uniquely
   associated with an Attesting Environment of the Attester.  As a
   result, a single Authentication Secret ID identifies a single
   Attesting Environment.  Analogously, a set of Evidence originating
   from multiple Attesting Environments in a composite device can be
   requested via multiple Authentication Secret IDs.  Methods to acquire
   Authentication Secret IDs or mappings between Attesting Environments
   to Authentication Secret IDs are out-of-scope of this document.  The
   Claim Selection narrows down the set of Claims collected and used to
   create Evidence, if required.  If the Claim Selection is omitted,
   then by default all Claims that are known and available on the
   Attester MUST be used to create corresponding Evidence.  For example,
   a Verifier may only be requesting a particular subset of claims about
   the Attester, such as Evidence about BIOS and firmware the Attester
   booted up with (boot integrity Evidence) - and not include
   information about all currently running software (run-time integrity
   Evidence).



Birkholz & Eckel        Expires 26 December 2020                [Page 8]

Internet-Draft                    REIM                         June 2020


   While it is crucial that Claims, the Handle, as well as the Attester
   Identity information MUST be cryptographically bound to the signature
   of Evidence, it is not required for them to be present in plain text.
   Cryptographic blinding MAY be used at this point.  For further
   reference see section Section 10.

   As soon as the Verifier receives signed Evidence, it validates the
   signature, the Attester Identity, as well as the Nonce, and appraises
   the Claims.  Appraisal procedures are application-specific and can be
   conducted via comparison of the Claims with corresponding Reference
   Claims, such as Reference Integrity Measurements (RIM).  The final
   output of the Verifier are Attestation Results.  Attestation Results
   constitute new Claims Sets about an Attester's properties and
   characteristics that enables Relying Parties, for example, to assess
   an Attester's trustworthiness.

7.2.  Uni-Directional Remote Attestation


































Birkholz & Eckel        Expires 26 December 2020                [Page 9]

Internet-Draft                    REIM                         June 2020


   .----------.                                                .----------.
   | Attester |                                                | Verifier |
   '----------'                                                '----------'
        |                                                            |
   valueGeneration(targetEnvironment)                                |
        | => claims                                                  |
        |                                                            |
        |                   .--------------------.                   |
        | <----------handle |                    |                   |
        |                   | Handle Distributor |                   |
        |                   |                    | handle----------> |
        |                   '--------------------'                   |
        |                                                            |
   evidenceGeneration(handle, authSecIDs, collectedClaims)           |
        | => evidence                                                |
        |                                                            |
        | pushEventLog---------------------------------------------> |
        | pushEvidence---------------------------------------------> |
        |                                                            |
        |                   appraiseEvidence(evidence, eventLog, refClaims)
        |                            evidenceAppraisal(evidence, refClaims)
        |                                       attestationResult <= |
        ~                                                            ~
        |                                                            |
   valueGeneration(targetEnvironment)                                |
        | => claimsDelta                                             |
        |                                                            |
   evidenceGeneration(handle, authSecIDs, collectedClaims)           |
        | => evidence                                                |
        |                                                            |
        | pushEventLogDelta----------------------------------------> |
        | pushEvidence---------------------------------------------> |
        |                                                            |
        |              appraiseEvidence(evidence, eventLogDelta, refClaims)
        |                            evidenceAppraisal(evidence, refClaims)
        |                                       attestationResult <= |
        |                                                            |

   Uni-Directional Remote Attestation procedures can be initiated both
   by the Attester and by the Verifier.  Initiation by the Attester can
   result in unsolicited pushes of Evidence to the Verifier.  Initiation
   by the Verifier always results in solicited pushes to the Verifier.
   The Uni-Directional model uses the same information elements as the
   Challenge/Response model.  In the sequence diagram above, the
   Attester initiates the conveyance of Evidence (comparable with a
   RESTful POST operation or the emission of a beacon).  While a request
   of evidence from the Verifier would result in a sequence diagram more
   similar to the Challenge/Response model (comparable with a RESTful



Birkholz & Eckel        Expires 26 December 2020               [Page 10]

Internet-Draft                    REIM                         June 2020


   GET operation), the specific manner how handles are created and used
   always remains as the distinguishing quality of this model.  In the
   Uni-Directional model, handles are composed of trustable signed
   timestamps as shown in [I-D.birkholz-rats-tuda], potentially
   including other qualifying data.  The handles are created by an
   external 3rd entity - the Handle Distributor - that includes a
   trustworthy source of time and takes on the role of a Time Stamping
   Authority (TSA, as initially defined in [RFC3161]).  Timstamps
   created from local clocks (absolute clocks using a global timescale,
   as well as relative clocks, such as tick-counters) of Attesters and
   Verifiers MUST be cryptographically bound to fresh Handles received
   from the Handle Distributor.  This binding provides a proof of
   synchronization that MUST be included in every evidence created.
   Correspondingly, evidence created for conveyance via this model
   provides a proof that it was fresh at a certain point in time.
   Effectively, this allows for series of evidence to be pushed to
   multiple Verifiers, simultaniously.  Methods to detect excessive time
   drift that would mandate a fresh Handle to be received by the Handle
   Distributor, as well as timing of handle distribution are out-of-
   scope of this document.

7.3.  Streaming Remote Attestation





























Birkholz & Eckel        Expires 26 December 2020               [Page 11]

Internet-Draft                    REIM                         June 2020


   .----------.                                                .----------.
   | Attester |                                                | Verifier |
   '----------'                                                '----------'
        |                                                            |
   valueGeneration(targetEnvironment)                                |
        | => claims                                                  |
        |                                                            |
        | <----subscribeEvidence(handle, authSecIDs, claimSelection) |
        | subscriptionResult --------------------------------------> |
        |                                                            |
   evidenceGeneration(handle, authSecIDs, collectedClaims)           |
        | => evidence                                                |
        |                                                            |
        | pushEventLog---------------------------------------------> |
        | pushEvidence---------------------------------------------> |
        |                                                            |
        |                  evidenceAppraisal(evidence, eventLog, refClaims)
        |                                       attestationResult <= |
        ~                                                            ~
        |                                                            |
   valueGeneration(targetEnvironment)                                |
        | => claimsDelta                                             |
        |                                                            |
   evidenceGeneration(handle, authSecIDs, collectedClaims)           |
        | => evidence                                                |
        |                                                            |
        | pushEventLogDelta----------------------------------------> |
        | pushEvidence---------------------------------------------> |
        |                                                            |
        |             evidenceAppraisal(evidence, eventLogDelta, refClaims)
        |                                       attestationResult <= |
        |                                                            |

   Streaming Remote Attestation procedures require the setup of
   subscription state.  Setting up subscription state between a Verifier
   and an Attester is conducted via a subscribe operation.  This
   subscribe operation is used to convey the handles required for
   Evidence generation.  Effectively, this allows for series of evidence
   to be pushed to a Verifier similar to the Uni-Directional model.
   While a Handle Distributor is not required in this model, it is also
   limited to bi-lateral subscription relationships, in which each
   Verifier has to create and provide its individual handle.  Handles
   provided by a specific subscribing Verifier MUST be used in Evidence
   generation for that specific Verifier.  The Streaming model uses the
   same information elements as the Challenge/Response and the Uni-
   Directional model.  Methods to detect excessive time drift that would
   mandate a refreshed Handle to be conveyed via another subscribe
   operation are out-of-scope of this document.



Birkholz & Eckel        Expires 26 December 2020               [Page 12]

Internet-Draft                    REIM                         June 2020


8.  Additional Application-Specific Requirements

   Depending on the use cases covered, there can be additional
   requirements.  An exemplary subset is illustrated in this section.

8.1.  Confidentiality

   Confidentiality of exchanged attestation information may be
   desirable.  This requirement usually is present when communication
   takes place over insecure channels, such as the public Internet.  In
   such cases, TLS may be uses as a suitable communication protocol that
   preserves confidentiality.  In private networks, such as carrier
   management networks, it must be evaluated whether or not the
   transport medium is considered confidential.

8.2.  Mutual Authentication

   In particular use cases mutual authentication may be desirable in
   such a way that a Verifier also needs to prove its identity to the
   Attester, instead of only the Attester proving its identity to the
   Verifier.

8.3.  Hardware-Enforcement/Support

   Depending on given usage scenarios, hardware support for secure
   storage of cryptographic keys, crypto accelerators, as well as
   protected or isolated execution environments can be mandatory
   requirements.  Well-known technologies in support of these
   requirements are roots of trusts, such as Hardware Security Modules
   (HSM), Physically Unclonable Functions (PUFs), Shielded Secrets, or
   Trusted Executions Environments (TEEs).

9.  Implementation Status

   Note to RFC Editor: Please remove this section as well as references
   to [BCP205] before AUTH48.















Birkholz & Eckel        Expires 26 December 2020               [Page 13]

Internet-Draft                    REIM                         June 2020


   This section records the status of known implementations of the
   protocol defined by this specification at the time of posting of this
   Internet-Draft, and is based on a proposal described in [BCP205].
   The description of implementations in this section is intended to
   assist the IETF in its decision processes in progressing drafts to
   RFCs.  Please note that the listing of any individual implementation
   here does not imply endorsement by the IETF.  Furthermore, no effort
   has been spent to verify the information presented here that was
   supplied by IETF contributors.  This is not intended as, and must not
   be construed to be, a catalog of available implementations or their
   features.  Readers are advised to note that other implementations may
   exist.

   According to [BCP205], "this will allow reviewers and working groups
   to assign due consideration to documents that have the benefit of
   running code, which may serve as evidence of valuable experimentation
   and feedback that have made the implemented protocols more mature.
   It is up to the individual working groups to use this information as
   they see fit".

9.1.  Implementer

   The open-source implementation was initiated and is maintained by the
   Fraunhofer Institute for Secure Information Technology - SIT.

9.2.  Implementation Name

   The open-source implementation is named "CHAllenge-Response based
   Remote Attestation" or in short: CHARRA.

9.3.  Implementation URL

   The open-source implementation project resource can be located via:
   https://github.com/Fraunhofer-SIT/charra

9.4.  Maturity

   The code's level of maturity is considered to be "prototype".

9.5.  Coverage and Version Compatibility

   The current version (commit '847bcde') is aligned with the exemplary
   specification of the CoAP FETCH bodies defined in section Appendix A
   of this document.







Birkholz & Eckel        Expires 26 December 2020               [Page 14]

Internet-Draft                    REIM                         June 2020


9.6.  License

   The CHARRA project and all corresponding code and data maintained on
   github are provided under the BSD 3-Clause "New" or "Revised"
   license.

9.7.  Implementation Dependencies

   The implementation requires the use of the official Trusted Computing
   Group (TCG) open-source Trusted Software Stack (TSS) for the Trusted
   Platform Module (TPM) 2.0.  The corresponding code and data is also
   maintained on github and the project resources can be located via:
   https://github.com/tpm2-software/tpm2-tss/

   The implementation uses the Constrained Application Protocol
   [RFC7252] (http://coap.technology/) and the Concise Binary Object
   Representation [RFC7049] (https://cbor.io/).

9.8.  Contact

   Michael Eckel (michael.eckel@sit.fraunhofer.de)

10.  Security and Privacy Considerations

   In a remote attestation procedure the Verifier or the Attester MAY
   want to cryptographically blind several attributes.  For instance,
   information can be part of the signature after applying a one-way
   function (e. g. a hash function).

   There is also a possibility to scramble the Nonce or Attester
   Identity with other information that is known to both the Verifier
   and Attester.  A prominent example is the IP address of the Attester
   that usually is known by the Attester itself as well as the Verifier.
   This extra information can be used to scramble the Nonce in order to
   counter certain types of relay attacks.

11.  Acknowledgments

   Olaf Bergmann and Ned Smith

12.  Change Log

   *  Initial draft -00

   *  Changes from version 00 to version 01:

      -  Added details to the flow diagram




Birkholz & Eckel        Expires 26 December 2020               [Page 15]

Internet-Draft                    REIM                         June 2020


      -  Integrated comments from Ned Smith (Intel)

      -  Reorganized sections and

      -  Updated interaction model

      -  Replaced "claims" with "assertions"

      -  Added proof-of-concept CDDL for CBOR via CoAP based on a TPM
         2.0 quote operation

   *  Changes from version 01 to version 02:

      -  Revised the relabeling of "claims" with "assertion" in
         alignment with the RATS Architecture I-D.

      -  Added Implementation Status section

      -  Updated interaction model

      -  Text revisions based on changes in [I-D.ietf-rats-architecture]
         and comments provided on rats@ietf.org.

13.  References

13.1.  Normative References

   [BCP205]   Sheffer, Y. and A. Farrel, "Improving Awareness of Running
              Code: The Implementation Status Section", BCP 205,
              RFC 7942, DOI 10.17487/RFC7942, July 2016,
              <https://www.rfc-editor.org/info/rfc7942>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC3161]  Adams, C., Cain, P., Pinkas, D., and R. Zuccherato,
              "Internet X.509 Public Key Infrastructure Time-Stamp
              Protocol (TSP)", RFC 3161, DOI 10.17487/RFC3161, August
              2001, <https://www.rfc-editor.org/info/rfc3161>.

   [RFC7049]  Bormann, C. and P. Hoffman, "Concise Binary Object
              Representation (CBOR)", RFC 7049, DOI 10.17487/RFC7049,
              October 2013, <https://www.rfc-editor.org/info/rfc7049>.






Birkholz & Eckel        Expires 26 December 2020               [Page 16]

Internet-Draft                    REIM                         June 2020


   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <https://www.rfc-editor.org/info/rfc7252>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8610]  Birkholz, H., Vigano, C., and C. Bormann, "Concise Data
              Definition Language (CDDL): A Notational Convention to
              Express Concise Binary Object Representation (CBOR) and
              JSON Data Structures", RFC 8610, DOI 10.17487/RFC8610,
              June 2019, <https://www.rfc-editor.org/info/rfc8610>.

13.2.  Informative References

   [I-D.birkholz-rats-tuda]
              Fuchs, A., Birkholz, H., McDonald, I., and C. Bormann,
              "Time-Based Uni-Directional Attestation", Work in
              Progress, Internet-Draft, draft-birkholz-rats-tuda-02, 9
              March 2020, <http://www.ietf.org/internet-drafts/draft-
              birkholz-rats-tuda-02.txt>.

   [I-D.ietf-rats-architecture]
              Birkholz, H., Thaler, D., Richardson, M., Smith, N., and
              W. Pan, "Remote Attestation Procedures Architecture", Work
              in Progress, Internet-Draft, draft-ietf-rats-architecture-
              04, 21 May 2020, <http://www.ietf.org/internet-drafts/
              draft-ietf-rats-architecture-04.txt>.

Appendix A.  CDDL Specification for a simple CoAP Challenge/Response
             Interaction

   The following CDDL specification is an examplary proof-of-concept to
   illustrate a potential implementation of the Reference Interaction
   Model.  The transfer protocol used is CoAP using the FETCH operation.
   The actual resource operated on can be empty.  Both the Challenge
   Message and the Response Message are exchanged via the FETCH Request
   and FETCH Response body.

   In this example, the root-of-trust for reporting primitive operation
   "quote" is provided by a TPM 2.0.








Birkholz & Eckel        Expires 26 December 2020               [Page 17]

Internet-Draft                    REIM                         June 2020


   RAIM-Bodies = CoAP-FETCH-Body / CoAP-FETCH-Response-Body

   CoAP-FETCH-Body = [ hello: bool, ; if true, the AK-Cert is conveyed
                       nonce: bytes,
                       pcr-selection: [ + [ tcg-hash-alg-id: uint .size 2, ; TPM2_ALG_ID
                                            [ + pcr: uint .size 1 ],
                                          ]
                                      ],
                     ]

   CoAP-FETCH-Response-Body = [ attestation-evidence: TPMS_ATTEST-quote,
                                tpm-native-signature: bytes,
                                ? ak-cert: bytes, ; attestation key certificate
                              ]

   TPMS_ATTEST-quote = [ qualifiediSigner: uint .size 2, ;TPM2B_NAME
                         TPMS_CLOCK_INFO,
                         firmwareVersion: uint .size 8
                         quote-responses: [ * [ pcr: uint .size 1,
                                                + [ pcr-value: bytes,
                                                    ? hash-alg-id: uint .size 2,
                                                  ],
                                              ],
                                            ? pcr-digest: bytes,
                                          ],
                       ]

   TPMS_CLOCK_INFO = [ clock: uint .size 8,
                       resetCounter: uint .size 4,
                       restartCounter: uint .size 4,
                       save: bool,
                     ]

Authors' Addresses

   Henk Birkholz
   Fraunhofer SIT
   Rheinstrasse 75
   64295 Darmstadt
   Germany

   Email: henk.birkholz@sit.fraunhofer.de









Birkholz & Eckel        Expires 26 December 2020               [Page 18]

Internet-Draft                    REIM                         June 2020


   Michael Eckel
   Fraunhofer SIT
   Rheinstrasse 75
   64295 Darmstadt
   Germany

   Email: michael.eckel@sit.fraunhofer.de












































Birkholz & Eckel        Expires 26 December 2020               [Page 19]
